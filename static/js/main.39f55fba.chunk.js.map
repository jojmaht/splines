{"version":3,"sources":["SplineLayer.jsx","App.js","index.js"],"names":["getPoints","radius","shape","layerDimensions","rotation","precisePosition","x","y","quickPosition","points","numPoints","angleStep","Math","PI","getPositionOffsets","offsetX","offsetY","additionnalOffsetX","additionnalOffsetY","i","theta","cos","sin","push","position","SplineLayer","index","layerLabel","useControls","folder","isFilled","color","tension","value","min","max","step","thickness","options","nested","useNestedParams","render","get","nestedParams","nShape","nColor","nTension","nRadius","nThickness","nRotation","hideMainSpline","mainPath","path","spline","nestedPaths","map","point","nestedRadius","nestedRotation","nestedShape","nestedTension","nestedThickness","nestedColor","items","zIndex","draggable","stroke","strokeWidth","sceneFunc","context","p","Path2D","fillStrokeShape","_context","lineWidth","strokeStyle","fillStyle","fill","App","layers","backgroundColor","className","style","display","width","height","inset","Array","from","length","item","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39f55fba.chunk.js","sourcesContent":["import { Group, Shape } from \"react-konva\";\nimport { useControls, folder, buttonGroup } from \"leva\";\nimport { spline } from \"@georgedoescode/spline\";\n\nconst getPoints = (\n  radius,\n  shape,\n  layerDimensions,\n  rotation,\n  precisePosition = { x: 0, y: 0 },\n  quickPosition = \"center\"\n) => {\n  const points = [];\n  const numPoints = shape === 0 ? 12 : shape;\n  const angleStep = (Math.PI * 2) / numPoints;\n  const { offsetX, offsetY } = getPositionOffsets(quickPosition);\n  const { x: additionnalOffsetX, y: additionnalOffsetY } = precisePosition;\n\n  for (let i = 1; i <= numPoints; i++) {\n    const theta = i * angleStep + Math.PI * 2 * ((rotation - 90) / 360);\n\n    const x =\n      layerDimensions / 2 +\n      Math.cos(theta) * radius +\n      offsetX +\n      additionnalOffsetX;\n    const y =\n      layerDimensions / 2 +\n      Math.sin(theta) * radius +\n      offsetY +\n      additionnalOffsetY;\n\n    points.push(\n      ...[\n        {\n          x,\n          y,\n          theta,\n        },\n      ]\n    );\n  }\n\n  return points;\n};\n\nconst getPositionOffsets = (position) => {\n  switch (position) {\n    case \"center\":\n      return { offsetX: 0, offsetY: 0 };\n    case \"top-left\":\n      return { offsetX: -500, offsetY: -500 };\n    case \"top-center\":\n      return { offsetX: 0, offsetY: -500 };\n    case \"top-right\":\n      return { offsetX: 500, offsetY: -500 };\n    case \"middle-left\":\n      return { offsetX: -500, offsetY: 0 };\n    case \"middle-right\":\n      return { offsetX: 500, offsetY: 0 };\n    case \"bottom-left\":\n      return { offsetX: -500, offsetY: 500 };\n    case \"bottom-center\":\n      return { offsetX: 0, offsetY: 500 };\n    case \"bottom-right\":\n      return { offsetX: 500, offsetY: 500 };\n  }\n};\n\nexport const SplineLayer = ({ index }) => {\n  const layerLabel = `Layer ${index}`;\n  const {\n    shape,\n    isFilled,\n    color,\n    tension,\n    radius,\n    nested,\n    nColor,\n    nTension,\n    nShape,\n    nRadius,\n    nThickness,\n    nRotation,\n    useNestedParams,\n    hideMainSpline,\n    thickness,\n    quickPosition,\n    precisePosition,\n    rotation,\n  } = useControls({\n    [layerLabel]: folder({\n      shape: 4,\n      isFilled: false,\n      color: \"#fff\",\n      tension: 0,\n      radius: { value: 200, min: 0, max: 500, step: 1 },\n      thickness: 1,\n      rotation: { value: 0, min: -360, max: 360, step: 0.5 },\n      quickPosition: {\n        options: [\n          \"center\",\n          \"top-left\",\n          \"top-center\",\n          \"top-right\",\n          \"middle-left\",\n          \"middle-right\",\n          \"bottom-left\",\n          \"bottom-center\",\n          \"bottom-right\",\n        ],\n      },\n      precisePosition: { value: { x: 0, y: 0 }, step: 20 },\n      nested: false,\n      useNestedParams: {\n        value: false,\n        render: (get) => get(`${layerLabel}.nested`),\n      },\n      nestedParams: folder(\n        {\n          nShape: 3,\n          nColor: \"#ffffff\",\n          nTension: 0,\n          nRadius: { value: 50, min: 0, max: 500, step: 1 },\n          nThickness: { value: 1, min: 0, step: 1 },\n          nRotation: { value: 0, min: -360, max: 360, step: 0.5 },\n        },\n        {\n          render: (get) => get(`${layerLabel}.useNestedParams`),\n        }\n      ),\n      hideMainSpline: {\n        value: false,\n        render: (get) => get(`${layerLabel}.nested`),\n      },\n    }),\n  });\n  const width = 1000;\n\n  const points = getPoints(\n    radius,\n    shape,\n    width,\n    rotation,\n    precisePosition,\n    quickPosition\n  );\n  const mainPath = !hideMainSpline\n    ? { path: spline(points, tension, true), color, thickness }\n    : [];\n\n  const nestedPaths = nested\n    ? points.map((point) => {\n        const nestedRadius = useNestedParams ? nRadius : radius / 4;\n        const nestedRotation = useNestedParams ? nRotation : rotation / 4;\n        const nestedShape = useNestedParams ? nShape : shape;\n        const nestedTension = useNestedParams ? nTension : tension;\n        const nestedThickness = useNestedParams ? nThickness : thickness;\n        const nestedColor = useNestedParams ? nColor : color;\n\n        return {\n          path: spline(\n            getPoints(nestedRadius, nestedShape, 0, nestedRotation, point),\n            nestedTension,\n            true\n          ),\n          color: nestedColor,\n          thickness: nestedThickness,\n        };\n      })\n    : [];\n\n  const items = [mainPath, ...nestedPaths];\n\n  return (\n    <Group zIndex={index} draggable={true}>\n      {items.map(({ path, color, thickness }) => (\n        <Shape\n          stroke={color}\n          strokeWidth={thickness}\n          x={0}\n          y={0}\n          draggable={true}\n          sceneFunc={(context, shape) => {\n            const p = new Path2D(path);\n            context.fillStrokeShape(shape);\n            context._context.lineWidth = thickness;\n            context._context.strokeStyle = color;\n            context._context.fillStyle = isFilled ? color : \"transparent\";\n            context._context.fill(p);\n            context._context.stroke(p);\n          }}\n        ></Shape>\n      ))}\n    </Group>\n  );\n};\n","import \"./App.css\";\nimport { Layer, Stage, Rect } from \"react-konva\";\nimport { SplineLayer } from \"./SplineLayer\";\nimport { useControls, Leva } from \"leva\";\n\nfunction App() {\n  const { layers, backgroundColor } = useControls({\n    layers: 1,\n    backgroundColor: \"#000000\",\n  });\n\n  return (\n    <div className=\"App\" style={{ display: \"flex\" }}>\n      <div style={{ width: \"100vh\", height: \"100vh\", position: \"relative\" }}>\n        <Stage\n          width={1000}\n          height={1000}\n          style={{ position: \"absolute\", inset: 0 }}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={1000}\n              height={1000}\n              fill={backgroundColor}\n              sceneFunc={(context, shape) => {\n                const p = new Path2D(\"M0,0L1000,0L1000,1000L0,1000Z\");\n                context.fillStrokeShape(shape);\n                context._context.lineWidth = 0;\n                context._context.fill(p);\n              }}\n            />\n            {Array.from({ length: layers }).map((item, index) => (\n              <SplineLayer index={index} />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n      {/* <>\n        <Leva fill />\n      </> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}