{"version":3,"sources":["positionUtils.js","regularPolygonEngine.js","starPolygonEngine.js","SplineLayer.jsx","App.js","index.js"],"names":["getPositionOffsets","position","offsetX","offsetY","getRegularPolygonPoints","radius","shape","layerDimensions","rotation","precisePosition","x","y","quickPosition","points","numPoints","angleStep","Math","PI","additionnalOffsetX","additionnalOffsetY","i","theta","cos","sin","push","getPointsFromSchlafli","p","q","indices","starPolygonIndices","3","4","5","6","7","8","9","10","11","12","13","console","log","getStarPolygonPoints","max","min","pointIndices","SplineLayer","index","layerLabel","useControls","folder","type","options","isFilled","color","tension","value","step","thickness","nested","useNestedParams","render","get","nestedParams","nShape","nType","nColor","nTension","nRadius","nThickness","nRotation","hideMainSpline","getPointsGetter","mainPath","path","spline","nestedPaths","map","point","nestedRadius","nestedRotation","nestedShape","nestedTension","nestedThickness","nestedColor","nestedPoints","flat","items","zIndex","draggable","stroke","strokeWidth","sceneFunc","context","Path2D","fillStrokeShape","_context","lineWidth","strokeStyle","fillStyle","fill","App","layers","backgroundColor","className","style","display","width","height","inset","Array","from","length","item","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71fcec09.chunk.js","sourcesContent":["export const getPositionOffsets = (position) => {\n  switch (position) {\n    case \"center\":\n      return { offsetX: 0, offsetY: 0 };\n    case \"top-left\":\n      return { offsetX: -500, offsetY: -500 };\n    case \"top-center\":\n      return { offsetX: 0, offsetY: -500 };\n    case \"top-right\":\n      return { offsetX: 500, offsetY: -500 };\n    case \"middle-left\":\n      return { offsetX: -500, offsetY: 0 };\n    case \"middle-right\":\n      return { offsetX: 500, offsetY: 0 };\n    case \"bottom-left\":\n      return { offsetX: -500, offsetY: 500 };\n    case \"bottom-center\":\n      return { offsetX: 0, offsetY: 500 };\n    case \"bottom-right\":\n      return { offsetX: 500, offsetY: 500 };\n  }\n};\n","import { getPositionOffsets } from \"./positionUtils\";\n\nexport const getRegularPolygonPoints = (\n  radius,\n  shape,\n  layerDimensions,\n  rotation,\n  precisePosition = { x: 0, y: 0 },\n  quickPosition = \"center\"\n) => {\n  const points = [];\n  const numPoints = shape === 0 ? 12 : shape;\n  const angleStep = (Math.PI * 2) / numPoints;\n  const { offsetX, offsetY } = getPositionOffsets(quickPosition);\n  const { x: additionnalOffsetX, y: additionnalOffsetY } = precisePosition;\n\n  for (let i = 1; i <= numPoints; i++) {\n    const theta = i * angleStep + Math.PI * 2 * ((rotation - 90) / 360);\n\n    const hexagramIndices = [0, 3, 6, 9, 12, 15, 18, 21, 24];\n\n    const x = Math.cos(theta) * radius;\n    const y = Math.sin(theta) * radius;\n\n    points.push(\n      ...[\n        {\n          x: layerDimensions / 2 + offsetX + additionnalOffsetX + x,\n          y: layerDimensions / 2 + offsetY + additionnalOffsetY + y,\n          theta,\n        },\n      ]\n    );\n  }\n\n  return points;\n};\n","import { getPositionOffsets } from \"./positionUtils\";\n\nconst getPointsFromSchlafli = ([p, q]) => {\n  const indices = [0];\n  for (let i = 1; i <= p; i++) {\n    indices.push((q * i) % p);\n  }\n  return indices;\n};\n\nconst starPolygonIndices = {\n  3: [0, 1, 2, 0],\n  4: [0, 2, 3, 1, 0],\n  5: getPointsFromSchlafli([5, 2]),\n  6: [0, 2, 5, 3, 1, 4, 0],\n  7: getPointsFromSchlafli([7, 3]),\n  8: getPointsFromSchlafli([8, 3]),\n  9: getPointsFromSchlafli([9, 2]),\n  10: getPointsFromSchlafli([10, 3]),\n  11: getPointsFromSchlafli([11, 3]),\n  12: getPointsFromSchlafli([12, 5]),\n  13: getPointsFromSchlafli([13, 3]),\n};\n\nconsole.log(starPolygonIndices);\n\nexport const getStarPolygonPoints = (\n  radius,\n  shape,\n  layerDimensions,\n  rotation,\n  precisePosition = { x: 0, y: 0 },\n  quickPosition = \"center\"\n) => {\n  const points = [];\n  const numPoints = Math.max(3, Math.min(shape, 13));\n  const angleStep = (Math.PI * 2) / numPoints;\n  const { offsetX, offsetY } = getPositionOffsets(quickPosition);\n  const { x: additionnalOffsetX, y: additionnalOffsetY } = precisePosition;\n\n  const pointIndices = starPolygonIndices[numPoints]\n    ? starPolygonIndices[numPoints]\n    : getPointsFromSchlafli([numPoints, 3]);\n\n  for (let i = 1; i <= numPoints; i++) {\n    const theta =\n      angleStep * pointIndices[i] + Math.PI * 2 * ((rotation - 90) / 360);\n\n    const x = Math.cos(theta) * radius;\n    const y = Math.sin(theta) * radius;\n\n    points.push(\n      ...[\n        {\n          x: layerDimensions / 2 + offsetX + additionnalOffsetX + x,\n          y: layerDimensions / 2 + offsetY + additionnalOffsetY + y,\n          theta,\n        },\n      ]\n    );\n  }\n\n  return points;\n};\n","import { Group, Shape } from \"react-konva\";\nimport { useControls, folder, buttonGroup } from \"leva\";\nimport { spline } from \"@georgedoescode/spline\";\n\nimport { getRegularPolygonPoints } from \"./regularPolygonEngine\";\nimport { getStarPolygonPoints } from \"./starPolygonEngine\";\n\nexport const SplineLayer = ({ index }) => {\n  const layerLabel = `Layer ${index}`;\n  const {\n    type,\n    shape,\n    isFilled,\n    color,\n    tension,\n    radius,\n    nested,\n    nColor,\n    nTension,\n    nType,\n    nShape,\n    nRadius,\n    nThickness,\n    nRotation,\n    useNestedParams,\n    hideMainSpline,\n    thickness,\n    quickPosition,\n    precisePosition,\n    rotation,\n  } = useControls({\n    [layerLabel]: folder({\n      type: {\n        options: [\"polygon\", \"star\"],\n      },\n      shape: 4,\n      isFilled: false,\n      color: \"#fff\",\n      tension: 0,\n      radius: { value: 200, min: 0, max: 500, step: 1 },\n      thickness: 1,\n      rotation: { value: 0, min: -360, max: 360, step: 0.5 },\n      quickPosition: {\n        options: [\n          \"center\",\n          \"top-left\",\n          \"top-center\",\n          \"top-right\",\n          \"middle-left\",\n          \"middle-right\",\n          \"bottom-left\",\n          \"bottom-center\",\n          \"bottom-right\",\n        ],\n      },\n      precisePosition: { value: { x: 0, y: 0 }, step: 20 },\n      nested: false,\n      useNestedParams: {\n        value: false,\n        render: (get) => get(`${layerLabel}.nested`),\n      },\n      nestedParams: folder(\n        {\n          nShape: 3,\n          nType: {\n            options: [\"polygon\", \"star\"],\n          },\n          nColor: \"#ffffff\",\n          nTension: 0,\n          nRadius: { value: 50, min: 0, max: 500, step: 1 },\n          nThickness: { value: 1, min: 0, step: 1 },\n          nRotation: { value: 0, min: -360, max: 360, step: 0.5 },\n        },\n        {\n          render: (get) => get(`${layerLabel}.useNestedParams`),\n        }\n      ),\n      hideMainSpline: {\n        value: false,\n        render: (get) => get(`${layerLabel}.nested`),\n      },\n    }),\n  });\n  const width = 1000;\n\n  const getPointsGetter = (type) => {\n    if (type === \"star\") {\n      return getStarPolygonPoints;\n    } else return getRegularPolygonPoints;\n  };\n\n  const points = getPointsGetter(type)(\n    radius,\n    shape,\n    width,\n    rotation,\n    precisePosition,\n    quickPosition\n  );\n\n  const mainPath = !hideMainSpline\n    ? { path: spline(points, tension, true), color, thickness }\n    : [];\n\n  const nestedPaths = nested\n    ? points\n        .map((point) => {\n          const nestedType = useNestedParams ? nType : type;\n          const nestedRadius = useNestedParams ? nRadius : radius / 2;\n          const nestedRotation = useNestedParams ? nRotation : rotation / 4;\n          const nestedShape = useNestedParams ? nShape : shape;\n          const nestedTension = useNestedParams ? nTension : tension;\n          const nestedThickness = useNestedParams ? nThickness : thickness;\n          const nestedColor = useNestedParams ? nColor : color;\n\n          const nestedPoints = getPointsGetter(nestedType)(\n            nestedRadius,\n            nestedShape,\n            0,\n            nestedRotation,\n            point\n          );\n\n          return [\n            {\n              path: spline(nestedPoints, nestedTension, true),\n              color: nestedColor,\n              thickness: nestedThickness,\n            },\n          ].flat();\n        })\n        .flat()\n    : [];\n\n  const items = [mainPath, ...nestedPaths];\n  return (\n    <Group zIndex={index} draggable={true}>\n      {items.map(({ path, color, thickness }) => (\n        <Shape\n          stroke={color}\n          strokeWidth={thickness}\n          x={0}\n          y={0}\n          draggable={true}\n          sceneFunc={(context, shape) => {\n            const p = new Path2D(path);\n            context.fillStrokeShape(shape);\n            context._context.lineWidth = thickness;\n            context._context.strokeStyle = color;\n            context._context.fillStyle = isFilled ? color : \"transparent\";\n            context._context.fill(p);\n            context._context.stroke(p);\n          }}\n        ></Shape>\n      ))}\n    </Group>\n  );\n};\n","import \"./App.css\";\nimport { Layer, Stage, Rect } from \"react-konva\";\nimport { SplineLayer } from \"./SplineLayer\";\nimport { useControls, Leva } from \"leva\";\n\nfunction App() {\n  const { layers, backgroundColor } = useControls({\n    layers: 1,\n    backgroundColor: \"#000000\",\n  });\n\n  return (\n    <div className=\"App\" style={{ display: \"flex\" }}>\n      <div style={{ width: \"100vh\", height: \"100vh\", position: \"relative\" }}>\n        <Stage\n          width={1000}\n          height={1000}\n          style={{ position: \"absolute\", inset: 0 }}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={1000}\n              height={1000}\n              fill={backgroundColor}\n              sceneFunc={(context, shape) => {\n                const p = new Path2D(\"M0,0L1000,0L1000,1000L0,1000Z\");\n                context.fillStrokeShape(shape);\n                context._context.lineWidth = 0;\n                context._context.fill(p);\n              }}\n            />\n            {Array.from({ length: layers }).map((item, index) => (\n              <SplineLayer index={index} />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n      {/* <>\n        <Leva fill />\n      </> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}