{"version":3,"sources":["SplineLayer.jsx","App.js","index.js"],"names":["SplineLayer","index","useControls","folder","shape","isFilled","color","tension","radius","value","min","max","step","thickness","rotation","points","variance","layerDimensions","numPoints","angleStep","Math","PI","i","theta","x","cos","y","sin","push","getPoints","console","log","path","spline","zIndex","draggable","stroke","strokeWidth","sceneFunc","context","p","Path2D","fillStrokeShape","_context","lineWidth","strokeStyle","fillStyle","fill","App","layers","backgroundColor","className","style","width","height","position","inset","Array","from","length","map","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAkCaA,EAAc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAUpCC,YAAY,+BACJD,GAAUE,YAAO,CACzBC,MAAO,EACPC,UAAU,EACVC,MAAO,OACPC,QAAS,EACTC,OAAQ,CAAEC,MAAO,IAAKC,IAAK,EAAGC,IAAK,IAAKC,KAAM,GAC9CC,UAAW,EACXC,SAAU,CAAEL,MAAO,EAAGC,KAAM,IAAKC,IAAK,IAAKC,KAAM,QAhBnDR,EAFsC,EAEtCA,MACAC,EAHsC,EAGtCA,SACAC,EAJsC,EAItCA,MACAC,EALsC,EAKtCA,QACAC,EANsC,EAMtCA,OACAK,EAPsC,EAOtCA,UAgBIE,GAvBkC,EAQtCC,SAtCc,SAACR,EAAQJ,EAAOa,EAAiBH,GAQjD,IAR6E,IACvEC,EAAS,GAETG,EAAsB,IAAVd,EAAc,GAAKA,EAE/Be,EAAuB,EAAVC,KAAKC,GAAUH,EAGzBI,EAAI,EAAGA,GAAKJ,EAAWI,IAAK,CAEnC,IAAMC,EAAQD,EAAIH,EAAsB,EAAVC,KAAKC,KAAWP,EAAW,IAAM,KAEzDU,EAAIP,EAAkB,EAAIG,KAAKK,IAAIF,GAASf,EAC5CkB,EAAIT,EAAkB,EAAIG,KAAKO,IAAIJ,GAASf,EAGlDO,EAAOa,KAAP,MAAAb,EACK,CACD,CACES,IACAE,IACAH,WAMR,OAAOR,EA0BQc,CAAUrB,EAAQJ,EAFnB,IArB0B,EAStCU,WAeFgB,QAAQC,IAAIhB,GACZ,IAAMiB,EAAOC,YAAOlB,EAAQR,GAAS,GAErC,OACE,cAAC,IAAD,CAAO2B,OAAQjC,EAAOkC,WAAW,EAAjC,SACE,cAAC,IAAD,CACEC,OAAQ9B,EACR+B,YAAaxB,EACbW,EAAG,EACHE,EAAG,EACHS,WAAW,EACXG,UAAW,SAACC,EAASnC,GACnB,IAAMoC,EAAI,IAAIC,OAAOT,GACrBO,EAAQG,gBAAgBtC,GACxBmC,EAAQI,SAASC,UAAY/B,EAC7B0B,EAAQI,SAASE,YAAcvC,EAC/BiC,EAAQI,SAASG,UAAYzC,EAAWC,EAAQ,cAChDiC,EAAQI,SAASI,KAAKP,GACtBD,EAAQI,SAASP,OAAOI,SCjCnBQ,MAtCf,WAAgB,IAAD,EACuB9C,YAAY,CAC9C+C,OAAQ,EACRC,gBAAiB,YAFXD,EADK,EACLA,OAAQC,EADH,EACGA,gBAKhB,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,SAAU,YAAzD,SACE,cAAC,IAAD,CACEF,MAAO,IACPC,OAAQ,IACRF,MAAO,CAAEG,SAAU,WAAYC,MAAO,GAHxC,SAKE,eAAC,IAAD,WACE,cAAC,IAAD,CACEhC,EAAG,EACHE,EAAG,EACH2B,MAAO,IACPC,OAAQ,IACRP,KAAMG,EACNZ,UAAW,SAACC,EAASnC,GACnB,IAAMoC,EAAI,IAAIC,OAAO,iCACrBF,EAAQG,gBAAgBtC,GACxBmC,EAAQI,SAASC,UAAY,EAC7BL,EAAQI,SAASI,KAAKP,MAGzBiB,MAAMC,KAAK,CAAEC,OAAQV,IAAUW,KAAI,SAACC,EAAM5D,GAAP,OAClC,cAAC,EAAD,CAAaA,MAAOA,iBC9BlC6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.857c723d.chunk.js","sourcesContent":["import { Group, Shape } from \"react-konva\";\nimport { useControls, folder } from \"leva\";\nimport { spline } from \"@georgedoescode/spline\";\n\nconst getPoints = (radius, shape, layerDimensions, rotation, variance = 1) => {\n  const points = [];\n  // how many points do we need\n  const numPoints = shape === 0 ? 12 : shape;\n  // used to equally space each point around the circle\n  const angleStep = (Math.PI * 2) / numPoints;\n  // the radius of the circle\n\n  for (let i = 1; i <= numPoints; i++) {\n    // x & y coordinates of the current point\n    const theta = i * angleStep + Math.PI * 2 * ((rotation - 90) / 360);\n\n    const x = layerDimensions / 2 + Math.cos(theta) * radius;\n    const y = layerDimensions / 2 + Math.sin(theta) * radius;\n\n    // store the point's position\n    points.push(\n      ...[\n        {\n          x,\n          y,\n          theta,\n        },\n      ]\n    );\n  }\n\n  return points;\n};\n\nexport const SplineLayer = ({ index }) => {\n  const {\n    shape,\n    isFilled,\n    color,\n    tension,\n    radius,\n    thickness,\n    variance,\n    rotation,\n  } = useControls({\n    [`Layer ${index}`]: folder({\n      shape: 4,\n      isFilled: false,\n      color: \"#fff\",\n      tension: 0,\n      radius: { value: 200, min: 0, max: 500, step: 1 },\n      thickness: 1,\n      rotation: { value: 0, min: -360, max: 360, step: 0.5 },\n    }),\n  });\n  const width = 1000;\n\n  const points = getPoints(radius, shape, width, rotation);\n  console.log(points);\n  const path = spline(points, tension, true);\n\n  return (\n    <Group zIndex={index} draggable={true}>\n      <Shape\n        stroke={color}\n        strokeWidth={thickness}\n        x={0}\n        y={0}\n        draggable={true}\n        sceneFunc={(context, shape) => {\n          const p = new Path2D(path);\n          context.fillStrokeShape(shape);\n          context._context.lineWidth = thickness;\n          context._context.strokeStyle = color;\n          context._context.fillStyle = isFilled ? color : \"transparent\";\n          context._context.fill(p);\n          context._context.stroke(p);\n        }}\n      ></Shape>\n    </Group>\n  );\n};\n","import \"./App.css\";\nimport { Layer, Stage, Rect } from \"react-konva\";\nimport { SplineLayer } from \"./SplineLayer\";\nimport { useControls } from \"leva\";\n\nfunction App() {\n  const { layers, backgroundColor } = useControls({\n    layers: 1,\n    backgroundColor: \"#000000\",\n  });\n\n  return (\n    <div className=\"App\">\n      <div style={{ width: \"100vh\", height: \"100vh\", position: \"relative\" }}>\n        <Stage\n          width={1000}\n          height={1000}\n          style={{ position: \"absolute\", inset: 0 }}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={1000}\n              height={1000}\n              fill={backgroundColor}\n              sceneFunc={(context, shape) => {\n                const p = new Path2D(\"M0,0L1000,0L1000,1000L0,1000Z\");\n                context.fillStrokeShape(shape);\n                context._context.lineWidth = 0;\n                context._context.fill(p);\n              }}\n            />\n            {Array.from({ length: layers }).map((item, index) => (\n              <SplineLayer index={index} />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}